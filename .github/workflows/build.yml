name: Build

on:
  push:
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        include:
          - name: Ubuntu 18.04 (gcc)
            os: ubuntu-18.04
            cmake_args: -G Ninja -DFAAD=ON -DKEYFINDER=ON -DLOCALECOMPARE=ON -DMAD=ON -DMODPLUG=ON -DWAVPACK=ON
            ctest_args:
            ccache_path: ~/.ccache
            cpack_generator: DEB
            buildenv_script: tools/ubuntu_buildenv.sh
            artifacts_name: Ubuntu 18.04 DEB
            artifacts_path: cmake_build/*.deb
          - name: Ubuntu 20.04 (gcc)
            os: ubuntu-20.04
            cmake_args: -G Ninja -DFFMPEG=ON -DKEYFINDER=ON -DLOCALECOMPARE=ON -DMAD=ON -DMODPLUG=ON -DWAVPACK=ON
            ctest_args:
            ccache_path: ~/.ccache
            cpack_generator: DEB
            buildenv_script: tools/ubuntu_buildenv.sh
            artifacts_name: Ubuntu 20.04 DEB
            artifacts_path: cmake_build/*.deb
          - name: macOS 10.15
            os: macos-10.15
            cmake_args: -DCOREAUDIO=ON -DHSS1394=ON -DMACOS_BUNDLE=ON
            # TODO: Fix this broken test on macOS
            ctest_args: --exclude-regex DirectoryDAOTest.relocateDirectory
            cpack_generator: DragNDrop
            ccache_path: /Users/runner/Library/Caches/ccache
            buildenv_script: tools/macos_buildenv.sh
            artifacts_name: macOS DMG
            artifacts_path: cmake_build/*.dmg

    env:
      # macOS codesigning
      APPLE_CODESIGN_IDENTITY: 2C2B5D3EDCE82BA55E22E9A67F16F8D03E390870
      MACOS_CODESIGN_OPENSSL_PASSWORD: ${{ secrets.MACOS_CODESIGN_OPENSSL_PASSWORD }}
      MACOS_CODESIGN_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CODESIGN_CERTIFICATE_PASSWORD }}

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    steps:
    - name: "Check out repository"
      uses: actions/checkout@v2

    - name: "Set up cmake"
      uses: jwlawson/actions-setup-cmake@v1.4
      with:
        # This should always match the mininum required version in
        # our CMakeLists.txt
        cmake-version: '3.13.x'

    - name: "[macOS] Get build environment name"
      if: runner.os == 'macOS'
      id: buildenv_name
      run: ${{ matrix.buildenv_script }} name --ghactions

    - name: "[macOS] Set up build environment cache"
      if: runner.os == 'macOS'
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}/buildenv
        key: macOS-build-environment-${{ steps.buildenv_name.outputs.buildenv_name }}

    - name: "[macOS] Import Apple code signing identity"
      id: codesign
      if: runner.os == 'macOS' && env.MACOS_CODESIGN_OPENSSL_PASSWORD != null && env.MACOS_CODESIGN_CERTIFICATE_PASSWORD != null
      run: |
        # Decrypt the certificate
        openssl enc -aes-256-cbc -d -md sha512 \
          -k "${MACOS_CODESIGN_OPENSSL_PASSWORD}" \
          -in /Users/runner/work/mixxx/mixxx/cmake/macos_developer_id_codesign_certificate.p12.enc \
          -out ~/certificate.p12

        # Create a temporary keychain for the certificate and import it.
        security create-keychain -p mixxx Mixxx.keychain
        security unlock-keychain -p mixxx Mixxx.keychain
        security import ~/certificate.p12 -k Mixxx.keychain \
          -P "${MACOS_CODESIGN_CERTIFICATE_PASSWORD}" -T /usr/bin/codesign
        security set-key-partition-list -S "apple-tool:,apple:" -k mixxx Mixxx.keychain
        # Add keychain to search list
        security list-keychains -s Mixxx.keychain

        CMAKE_ARGS="-DAPPLE_CODESIGN_IDENTITY=${APPLE_CODESIGN_IDENTITY}"
        echo "::set-output name=cmake_args::${CMAKE_ARGS}"

    - name: "Set up build environment"
      id: buildenv
      run: ${{ matrix.buildenv_script }} setup --ghactions
      env:
        BUILDENV_BASEPATH: ${{ github.workspace }}/buildenv

    - name: "Set ccache size limit"
      run: ccache -M 5G
      env:
        PATH: ${{ steps.buildenv.outputs.path }}

    - name: "Set up ccache cache"
      uses: actions/cache@v2
      with:
        path: ${{ matrix.ccache_path }}
        key: ${{ matrix.os }}-ccache-${{ github.head_ref }}-${{ github.run_number }}
        restore-keys: |
          ${{ matrix.os }}-ccache-${{ github.head_ref }}
          ${{ matrix.os }}-ccache

    - name: "Create build directory"
      run: mkdir cmake_build

    - name: "Configure"
      run: |
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DBATTERY=ON \
          -DBROADCAST=ON \
          -DBULK=ON \
          -DDEBUG_ASSERTIONS_FATAL=ON \
          -DHID=ON \
          -DLILV=ON \
          -DOPUS=ON \
          -DQTKEYCHAIN=ON \
          -DVINYLCONTROL=ON \
          ${CMAKE_FLAGS_EXTRA} \
          ..
      working-directory: cmake_build
      env:
         PATH: ${{ steps.buildenv.outputs.path }}
         CMAKE_FLAGS_EXTRA: ${{ matrix.cmake_args }} ${{ steps.apple_codesign.outputs.cmake_args }} -DCMAKE_PREFIX_PATH=${{ steps.buildenv.outputs.cmake_prefix_path }} -DQt5_DIR=${{ steps.buildenv.outputs.qt_path }}
         MACOSX_DEPLOYMENT_TARGET: ${{ steps.buildenv.outputs.macosx_deployment_target }}

    - name: "Set up problem matcher"
      uses: ammaraskar/gcc-problem-matcher@master

    - name: "Build"
      run: cmake --build .
      working-directory: cmake_build
      env:
        CMAKE_BUILD_PARALLEL_LEVEL: 2
        # GitHub Actions automatically zstd compresses caches
        CCACHE_NOCOMPRESS: true
        PATH: ${{ steps.buildenv.outputs.path }}

    - name: "Print ccache stats"
      run: ccache -s
      env:
        PATH: ${{ steps.buildenv.outputs.path }}

    - name: "Test"
      run: ctest --timeout 45 ${{ matrix.ctest_args }}
      working-directory: cmake_build
      env:
        QT_QPA_PLATFORM_PLUGIN_PATH: ${{ steps.buildenv.outputs.qt_qpa_platform_plugin_path }}
        # Render analyzer waveform tests to an offscreen buffer
        QT_QPA_PLATFORM: offscreen
        GTEST_COLOR: 1
        CTEST_PARALLEL_LEVEL: 2
        CTEST_OUTPUT_ON_FAILURE: 1

    - name: Benchmark
      run: cmake --build . --target mixxx-benchmark
      working-directory: cmake_build
      env:
        QT_QPA_PLATFORM_PLUGIN_PATH: ${{ steps.buildenv.outputs.qt_qpa_platform_plugin_path }}
        # Render analyzer waveform tests to an offscreen buffer
        QT_QPA_PLATFORM: offscreen

    - name: "Package"
      run: cpack -G ${{ matrix.cpack_generator }}
      working-directory: cmake_build
      env:
        PATH: ${{ steps.buildenv.outputs.path }}

    - name: "[macOS] Sign Package"
      if: runner.os == 'macOS' && env.MACOS_CODESIGN_OPENSSL_PASSWORD != null && env.MACOS_CODESIGN_CERTIFICATE_PASSWORD != null
      run: codesign --verbose=4 --deep --force --options runtime --sign "${APPLE_CODESIGN_IDENTITY}" --entitlements ../build/osx/entitlements.plist *.dmg
        fi
      working-directory: cmake_build

    - name: "Deploy artifacts"
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.artifacts_name }}
        path: ${{ matrix.artifacts_path }}
